// Code generated by counterfeiter. DO NOT EDIT.
package esutilfakes

import (
	"context"
	"sync"

	"github.com/rode/grafeas-elasticsearch/go/v1beta1/storage/esutil"
)

type FakeClient struct {
	BulkStub        func(context.Context, *esutil.BulkRequest) (*esutil.EsBulkResponse, error)
	bulkMutex       sync.RWMutex
	bulkArgsForCall []struct {
		arg1 context.Context
		arg2 *esutil.BulkRequest
	}
	bulkReturns struct {
		result1 *esutil.EsBulkResponse
		result2 error
	}
	bulkReturnsOnCall map[int]struct {
		result1 *esutil.EsBulkResponse
		result2 error
	}
	CreateStub        func(context.Context, *esutil.CreateRequest) (string, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *esutil.CreateRequest
	}
	createReturns struct {
		result1 string
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DeleteStub        func(context.Context, *esutil.DeleteRequest) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 *esutil.DeleteRequest
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, *esutil.GetRequest) (*esutil.EsGetResponse, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 *esutil.GetRequest
	}
	getReturns struct {
		result1 *esutil.EsGetResponse
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *esutil.EsGetResponse
		result2 error
	}
	MultiGetStub        func(context.Context, *esutil.MultiGetRequest) (*esutil.EsMultiGetResponse, error)
	multiGetMutex       sync.RWMutex
	multiGetArgsForCall []struct {
		arg1 context.Context
		arg2 *esutil.MultiGetRequest
	}
	multiGetReturns struct {
		result1 *esutil.EsMultiGetResponse
		result2 error
	}
	multiGetReturnsOnCall map[int]struct {
		result1 *esutil.EsMultiGetResponse
		result2 error
	}
	MultiSearchStub        func(context.Context, *esutil.MultiSearchRequest) (*esutil.EsMultiSearchResponse, error)
	multiSearchMutex       sync.RWMutex
	multiSearchArgsForCall []struct {
		arg1 context.Context
		arg2 *esutil.MultiSearchRequest
	}
	multiSearchReturns struct {
		result1 *esutil.EsMultiSearchResponse
		result2 error
	}
	multiSearchReturnsOnCall map[int]struct {
		result1 *esutil.EsMultiSearchResponse
		result2 error
	}
	SearchStub        func(context.Context, *esutil.SearchRequest) (*esutil.SearchResponse, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		arg1 context.Context
		arg2 *esutil.SearchRequest
	}
	searchReturns struct {
		result1 *esutil.SearchResponse
		result2 error
	}
	searchReturnsOnCall map[int]struct {
		result1 *esutil.SearchResponse
		result2 error
	}
	UpdateStub        func(context.Context, *esutil.UpdateRequest) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 *esutil.UpdateRequest
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Bulk(arg1 context.Context, arg2 *esutil.BulkRequest) (*esutil.EsBulkResponse, error) {
	fake.bulkMutex.Lock()
	ret, specificReturn := fake.bulkReturnsOnCall[len(fake.bulkArgsForCall)]
	fake.bulkArgsForCall = append(fake.bulkArgsForCall, struct {
		arg1 context.Context
		arg2 *esutil.BulkRequest
	}{arg1, arg2})
	stub := fake.BulkStub
	fakeReturns := fake.bulkReturns
	fake.recordInvocation("Bulk", []interface{}{arg1, arg2})
	fake.bulkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) BulkCallCount() int {
	fake.bulkMutex.RLock()
	defer fake.bulkMutex.RUnlock()
	return len(fake.bulkArgsForCall)
}

func (fake *FakeClient) BulkCalls(stub func(context.Context, *esutil.BulkRequest) (*esutil.EsBulkResponse, error)) {
	fake.bulkMutex.Lock()
	defer fake.bulkMutex.Unlock()
	fake.BulkStub = stub
}

func (fake *FakeClient) BulkArgsForCall(i int) (context.Context, *esutil.BulkRequest) {
	fake.bulkMutex.RLock()
	defer fake.bulkMutex.RUnlock()
	argsForCall := fake.bulkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) BulkReturns(result1 *esutil.EsBulkResponse, result2 error) {
	fake.bulkMutex.Lock()
	defer fake.bulkMutex.Unlock()
	fake.BulkStub = nil
	fake.bulkReturns = struct {
		result1 *esutil.EsBulkResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) BulkReturnsOnCall(i int, result1 *esutil.EsBulkResponse, result2 error) {
	fake.bulkMutex.Lock()
	defer fake.bulkMutex.Unlock()
	fake.BulkStub = nil
	if fake.bulkReturnsOnCall == nil {
		fake.bulkReturnsOnCall = make(map[int]struct {
			result1 *esutil.EsBulkResponse
			result2 error
		})
	}
	fake.bulkReturnsOnCall[i] = struct {
		result1 *esutil.EsBulkResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Create(arg1 context.Context, arg2 *esutil.CreateRequest) (string, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *esutil.CreateRequest
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeClient) CreateCalls(stub func(context.Context, *esutil.CreateRequest) (string, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeClient) CreateArgsForCall(i int) (context.Context, *esutil.CreateRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) CreateReturns(result1 string, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateReturnsOnCall(i int, result1 string, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Delete(arg1 context.Context, arg2 *esutil.DeleteRequest) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 *esutil.DeleteRequest
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeClient) DeleteCalls(stub func(context.Context, *esutil.DeleteRequest) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeClient) DeleteArgsForCall(i int) (context.Context, *esutil.DeleteRequest) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Get(arg1 context.Context, arg2 *esutil.GetRequest) (*esutil.EsGetResponse, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 *esutil.GetRequest
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeClient) GetCalls(stub func(context.Context, *esutil.GetRequest) (*esutil.EsGetResponse, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeClient) GetArgsForCall(i int) (context.Context, *esutil.GetRequest) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetReturns(result1 *esutil.EsGetResponse, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *esutil.EsGetResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetReturnsOnCall(i int, result1 *esutil.EsGetResponse, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *esutil.EsGetResponse
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *esutil.EsGetResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) MultiGet(arg1 context.Context, arg2 *esutil.MultiGetRequest) (*esutil.EsMultiGetResponse, error) {
	fake.multiGetMutex.Lock()
	ret, specificReturn := fake.multiGetReturnsOnCall[len(fake.multiGetArgsForCall)]
	fake.multiGetArgsForCall = append(fake.multiGetArgsForCall, struct {
		arg1 context.Context
		arg2 *esutil.MultiGetRequest
	}{arg1, arg2})
	stub := fake.MultiGetStub
	fakeReturns := fake.multiGetReturns
	fake.recordInvocation("MultiGet", []interface{}{arg1, arg2})
	fake.multiGetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) MultiGetCallCount() int {
	fake.multiGetMutex.RLock()
	defer fake.multiGetMutex.RUnlock()
	return len(fake.multiGetArgsForCall)
}

func (fake *FakeClient) MultiGetCalls(stub func(context.Context, *esutil.MultiGetRequest) (*esutil.EsMultiGetResponse, error)) {
	fake.multiGetMutex.Lock()
	defer fake.multiGetMutex.Unlock()
	fake.MultiGetStub = stub
}

func (fake *FakeClient) MultiGetArgsForCall(i int) (context.Context, *esutil.MultiGetRequest) {
	fake.multiGetMutex.RLock()
	defer fake.multiGetMutex.RUnlock()
	argsForCall := fake.multiGetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) MultiGetReturns(result1 *esutil.EsMultiGetResponse, result2 error) {
	fake.multiGetMutex.Lock()
	defer fake.multiGetMutex.Unlock()
	fake.MultiGetStub = nil
	fake.multiGetReturns = struct {
		result1 *esutil.EsMultiGetResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) MultiGetReturnsOnCall(i int, result1 *esutil.EsMultiGetResponse, result2 error) {
	fake.multiGetMutex.Lock()
	defer fake.multiGetMutex.Unlock()
	fake.MultiGetStub = nil
	if fake.multiGetReturnsOnCall == nil {
		fake.multiGetReturnsOnCall = make(map[int]struct {
			result1 *esutil.EsMultiGetResponse
			result2 error
		})
	}
	fake.multiGetReturnsOnCall[i] = struct {
		result1 *esutil.EsMultiGetResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) MultiSearch(arg1 context.Context, arg2 *esutil.MultiSearchRequest) (*esutil.EsMultiSearchResponse, error) {
	fake.multiSearchMutex.Lock()
	ret, specificReturn := fake.multiSearchReturnsOnCall[len(fake.multiSearchArgsForCall)]
	fake.multiSearchArgsForCall = append(fake.multiSearchArgsForCall, struct {
		arg1 context.Context
		arg2 *esutil.MultiSearchRequest
	}{arg1, arg2})
	stub := fake.MultiSearchStub
	fakeReturns := fake.multiSearchReturns
	fake.recordInvocation("MultiSearch", []interface{}{arg1, arg2})
	fake.multiSearchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) MultiSearchCallCount() int {
	fake.multiSearchMutex.RLock()
	defer fake.multiSearchMutex.RUnlock()
	return len(fake.multiSearchArgsForCall)
}

func (fake *FakeClient) MultiSearchCalls(stub func(context.Context, *esutil.MultiSearchRequest) (*esutil.EsMultiSearchResponse, error)) {
	fake.multiSearchMutex.Lock()
	defer fake.multiSearchMutex.Unlock()
	fake.MultiSearchStub = stub
}

func (fake *FakeClient) MultiSearchArgsForCall(i int) (context.Context, *esutil.MultiSearchRequest) {
	fake.multiSearchMutex.RLock()
	defer fake.multiSearchMutex.RUnlock()
	argsForCall := fake.multiSearchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) MultiSearchReturns(result1 *esutil.EsMultiSearchResponse, result2 error) {
	fake.multiSearchMutex.Lock()
	defer fake.multiSearchMutex.Unlock()
	fake.MultiSearchStub = nil
	fake.multiSearchReturns = struct {
		result1 *esutil.EsMultiSearchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) MultiSearchReturnsOnCall(i int, result1 *esutil.EsMultiSearchResponse, result2 error) {
	fake.multiSearchMutex.Lock()
	defer fake.multiSearchMutex.Unlock()
	fake.MultiSearchStub = nil
	if fake.multiSearchReturnsOnCall == nil {
		fake.multiSearchReturnsOnCall = make(map[int]struct {
			result1 *esutil.EsMultiSearchResponse
			result2 error
		})
	}
	fake.multiSearchReturnsOnCall[i] = struct {
		result1 *esutil.EsMultiSearchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Search(arg1 context.Context, arg2 *esutil.SearchRequest) (*esutil.SearchResponse, error) {
	fake.searchMutex.Lock()
	ret, specificReturn := fake.searchReturnsOnCall[len(fake.searchArgsForCall)]
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		arg1 context.Context
		arg2 *esutil.SearchRequest
	}{arg1, arg2})
	stub := fake.SearchStub
	fakeReturns := fake.searchReturns
	fake.recordInvocation("Search", []interface{}{arg1, arg2})
	fake.searchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeClient) SearchCalls(stub func(context.Context, *esutil.SearchRequest) (*esutil.SearchResponse, error)) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = stub
}

func (fake *FakeClient) SearchArgsForCall(i int) (context.Context, *esutil.SearchRequest) {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	argsForCall := fake.searchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) SearchReturns(result1 *esutil.SearchResponse, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	fake.searchReturns = struct {
		result1 *esutil.SearchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) SearchReturnsOnCall(i int, result1 *esutil.SearchResponse, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	if fake.searchReturnsOnCall == nil {
		fake.searchReturnsOnCall = make(map[int]struct {
			result1 *esutil.SearchResponse
			result2 error
		})
	}
	fake.searchReturnsOnCall[i] = struct {
		result1 *esutil.SearchResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Update(arg1 context.Context, arg2 *esutil.UpdateRequest) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 *esutil.UpdateRequest
	}{arg1, arg2})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeClient) UpdateCalls(stub func(context.Context, *esutil.UpdateRequest) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeClient) UpdateArgsForCall(i int) (context.Context, *esutil.UpdateRequest) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bulkMutex.RLock()
	defer fake.bulkMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.multiGetMutex.RLock()
	defer fake.multiGetMutex.RUnlock()
	fake.multiSearchMutex.RLock()
	defer fake.multiSearchMutex.RUnlock()
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ esutil.Client = new(FakeClient)
