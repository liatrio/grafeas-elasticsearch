// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rode/grafeas-elasticsearch/go/v1beta1/storage/migration (interfaces: IndexManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	migration "github.com/rode/grafeas-elasticsearch/go/v1beta1/storage/migration"
	reflect "reflect"
)

// MockIndexManager is a mock of IndexManager interface
type MockIndexManager struct {
	ctrl     *gomock.Controller
	recorder *MockIndexManagerMockRecorder
}

// MockIndexManagerMockRecorder is the mock recorder for MockIndexManager
type MockIndexManagerMockRecorder struct {
	mock *MockIndexManager
}

// NewMockIndexManager creates a new mock instance
func NewMockIndexManager(ctrl *gomock.Controller) *MockIndexManager {
	mock := &MockIndexManager{ctrl: ctrl}
	mock.recorder = &MockIndexManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIndexManager) EXPECT() *MockIndexManagerMockRecorder {
	return m.recorder
}

// CreateIndex mocks base method
func (m *MockIndexManager) CreateIndex(arg0 context.Context, arg1 *migration.IndexInfo, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockIndexManagerMockRecorder) CreateIndex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockIndexManager)(nil).CreateIndex), arg0, arg1, arg2)
}

// GetAliasForIndex mocks base method
func (m *MockIndexManager) GetAliasForIndex(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasForIndex", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAliasForIndex indicates an expected call of GetAliasForIndex
func (mr *MockIndexManagerMockRecorder) GetAliasForIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasForIndex", reflect.TypeOf((*MockIndexManager)(nil).GetAliasForIndex), arg0)
}

// GetLatestVersionForDocumentKind mocks base method
func (m *MockIndexManager) GetLatestVersionForDocumentKind(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestVersionForDocumentKind", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLatestVersionForDocumentKind indicates an expected call of GetLatestVersionForDocumentKind
func (mr *MockIndexManagerMockRecorder) GetLatestVersionForDocumentKind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestVersionForDocumentKind", reflect.TypeOf((*MockIndexManager)(nil).GetLatestVersionForDocumentKind), arg0)
}

// IncrementIndexVersion mocks base method
func (m *MockIndexManager) IncrementIndexVersion(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementIndexVersion", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// IncrementIndexVersion indicates an expected call of IncrementIndexVersion
func (mr *MockIndexManagerMockRecorder) IncrementIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementIndexVersion", reflect.TypeOf((*MockIndexManager)(nil).IncrementIndexVersion), arg0)
}

// LoadMappings mocks base method
func (m *MockIndexManager) LoadMappings(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadMappings", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadMappings indicates an expected call of LoadMappings
func (mr *MockIndexManagerMockRecorder) LoadMappings(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadMappings", reflect.TypeOf((*MockIndexManager)(nil).LoadMappings), arg0)
}

// NotesAlias mocks base method
func (m *MockIndexManager) NotesAlias(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotesAlias", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// NotesAlias indicates an expected call of NotesAlias
func (mr *MockIndexManagerMockRecorder) NotesAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotesAlias", reflect.TypeOf((*MockIndexManager)(nil).NotesAlias), arg0)
}

// NotesIndex mocks base method
func (m *MockIndexManager) NotesIndex(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotesIndex", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// NotesIndex indicates an expected call of NotesIndex
func (mr *MockIndexManagerMockRecorder) NotesIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotesIndex", reflect.TypeOf((*MockIndexManager)(nil).NotesIndex), arg0)
}

// OccurrencesAlias mocks base method
func (m *MockIndexManager) OccurrencesAlias(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OccurrencesAlias", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// OccurrencesAlias indicates an expected call of OccurrencesAlias
func (mr *MockIndexManagerMockRecorder) OccurrencesAlias(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OccurrencesAlias", reflect.TypeOf((*MockIndexManager)(nil).OccurrencesAlias), arg0)
}

// OccurrencesIndex mocks base method
func (m *MockIndexManager) OccurrencesIndex(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OccurrencesIndex", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// OccurrencesIndex indicates an expected call of OccurrencesIndex
func (mr *MockIndexManagerMockRecorder) OccurrencesIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OccurrencesIndex", reflect.TypeOf((*MockIndexManager)(nil).OccurrencesIndex), arg0)
}

// ProjectsAlias mocks base method
func (m *MockIndexManager) ProjectsAlias() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectsAlias")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProjectsAlias indicates an expected call of ProjectsAlias
func (mr *MockIndexManagerMockRecorder) ProjectsAlias() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsAlias", reflect.TypeOf((*MockIndexManager)(nil).ProjectsAlias))
}

// ProjectsIndex mocks base method
func (m *MockIndexManager) ProjectsIndex() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectsIndex")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProjectsIndex indicates an expected call of ProjectsIndex
func (mr *MockIndexManagerMockRecorder) ProjectsIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectsIndex", reflect.TypeOf((*MockIndexManager)(nil).ProjectsIndex))
}
