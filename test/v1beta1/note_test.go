package v1beta1_test

import (
	fake "github.com/brianvoe/gofakeit/v5"
	"github.com/grafeas/grafeas/proto/v1beta1/build_go_proto"
	"github.com/grafeas/grafeas/proto/v1beta1/common_go_proto"
	"github.com/grafeas/grafeas/proto/v1beta1/grafeas_go_proto"
	"github.com/liatrio/grafeas-elasticsearch/test/util"
	. "github.com/onsi/gomega"
	"testing"
)

func TestNote(t *testing.T) {
	Expect := util.NewExpect(t)
	s := util.NewSetup()

	// setup project for occurrences
	projectName := util.RandomProjectName()

	// generate note ID (note IDs are provided by client, not generated by server)
	noteId := fake.UUID()

	_, err := util.CreateProject(s, projectName)
	Expect(err).ToNot(HaveOccurred())

	t.Run("creating a note", func(t *testing.T) {
		t.Run("should be successful", func(t *testing.T) {
			n, err := s.Gc.CreateNote(s.Ctx, &grafeas_go_proto.CreateNoteRequest{
				Parent: projectName,
				NoteId: noteId,
				Note: &grafeas_go_proto.Note{
					Name:             fake.LetterN(10),
					ShortDescription: fake.LoremIpsumSentence(fake.Number(5, 10)),
					LongDescription:  fake.LoremIpsumSentence(fake.Number(5, 10)),
					Kind:             common_go_proto.NoteKind_BUILD,
					Type: &grafeas_go_proto.Note_Build{
						Build: &build_go_proto.Build{
							BuilderVersion: fake.LetterN(10),
							Signature: &build_go_proto.BuildSignature{
								PublicKey: fake.LetterN(10),
								KeyId:     fake.LetterN(10),
								Signature: []byte(fake.LetterN(10)),
							},
						},
					},
				},
			})
			Expect(err).ToNot(HaveOccurred())

			_, err = s.Gc.GetNote(s.Ctx, &grafeas_go_proto.GetNoteRequest{Name: n.GetName()})
			Expect(err).ToNot(HaveOccurred())
		})
	})
}
